server:
  port: 9001

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/pg-db-demo
    username: postgres
    password: pass
  jpa:
    hibernate:
      ddl-auto: validate #create-drop #update #create #none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    open-in-view: false


#  Властивість `spring.jpa.hibernate.ddl-auto` визначає, як Hibernate буде створювати таблиці в базі даних при
#   запуску додатку. Ця властивість має наступні значення:
#
#  - `create`: означає, що Hibernate створює таблиці у базі даних заново кожен раз, коли запускається додаток.
#  Це означає, що якщо ви використовуєте значення `create`, то при кожному запуску додатку будуть створюватись нові таблиці
#  у базі даних, а старі таблиці будуть видалені. Це може бути корисно для розробки та тестування, але не рекомендується
#  для продакшену, оскільки це може призвести до втрати даних.
#
#  - `create-drop` означає, що Hibernate створює таблиці при запуску додатку та видаляє їх при зупинці додатку.
#  Це означає, що якщо ви використовуєте значення `create-drop`, то при кожному запуску додатку будуть створюватись нові
#  таблиці у базі даних, а старі таблиці будуть видалені при зупинці цього застосунку. Це може бути корисно для розробки
#  та тестування, але не рекомендується для продакшену, оскільки це може призвести до втрати даних.
#
#  Якщо у вас є повністю новий додаток, то ви можете використовувати значення `create` або `create-drop`, оскільки в цьому
#  випадку вам не потрібно зберігати жодних даних у базі даних. Якщо у вас вже є додаток та БД з даними, то ви повинні
#  використовувати значення `update` або `validate`, оскільки в цьому випадку вам потрібно зберігати дані у базі даних та
#  зберігати структуру таблиць.
#
#  - `update` означає, що Hibernate оновлює таблиці в базі даних при запуску додатку, якщо вони вже існують.
#     Якщо таблиці не існують, вони будуть створені.

# Хоча режим `update` може бути корисним для розробки, використання його в продакшені може бути небезпечним.
# Ось кілька причин, чому використання режиму `update` не рекомендується в продакшені:
#
#   1. Втрата даних: Якщо ви змінюєте структуру таблиць в базі даних, це може призвести до втрати даних. Наприклад, якщо
#     ви видаляєте стовпець з таблиці, всі дані в цьому стовпці будуть втрачені. Це може бути небезпечним для продакшенових
#     систем, де дані є критичними.
#
#   2. Непередбачувані наслідки: Якщо ви змінюєте структуру таблиць в базі даних, це може мати непередбачувані наслідки
#     для вашої системи. Наприклад, якщо ви додаєте новий стовпець до таблиці, це може призвести до помилок в коді, який
#     використовує цю таблицю.
#
#   3. Проблеми з продуктивністю: Якщо ви змінюєте структуру таблиць в базі даних, це може призвести до проблем з продуктивністю.
#     Наприклад, якщо ви додаєте новий індекс до таблиці, це може призвести до збільшення часу запитів до цієї таблиці.
#
#   4. Необхідність ручної перевірки: Якщо ви використовуєте режим `update`, вам потрібно буде ручно перевірити, що зміни
#     відбулися безпечно. Це може бути часом затратним та небезпечним для продакшенових систем.
#
#   Отже, використання режиму `update` не рекомендується в продакшені через можливість втрати даних, непередбачувані наслідки,
#   проблеми з продуктивністю та необхідність ручної перевірки. Замість цього, рекомендується використовувати режим
#   `validate` або `none`, які дозволяють перевірити структуру таблиць без ризику втрати даних або проблем з продуктивністю.
#
#
#  Значення `validate` означає, що Hibernate перевіряє, чи відповідає структура таблиць у базі даних моделі даних.
#  Це може бути корисно для продакшену, оскільки воно не змінює структуру таблиць у базі даних та дозволяє перевірити,
#  чи відповідає структура таблиць моделі даних = дозволяє виявити проблеми зі структурою таблиць до того, як вони стануть критичними.
#
#  Ось кілька причин, чому використання режиму `validate` може бути корисним в продакшені:
#
#     1. Забезпечення цілісності даних: Якщо структура таблиць не відповідає структурі, визначеній в сутностях, це може
#       призвести до проблем з цілісністю даних. Наприклад, якщо ви змінюєте тип даних в стовпці таблиці, це може призвести
#       до втрати даних або до помилок в коді, який використовує цю таблицю.
#
#     2. Зменшення ризику помилок: можете виявити проблеми зі структурою таблиць до того, як вони стануть критичними.
#       Це може допомогти зменшити ризик помилок та забезпечити більш стабільну роботу вашої системи.
#
#     3. Забезпечення сумісності зі схемою бази даних: можете перевірити, чи відповідає структура таблиць схемі бази даних.
#       Це може бути корисним, якщо ви працюєте з багатьма базами даних або змінюєте схему бази даних.
#
#     4. Забезпечення безпеки: можете перевірити, чи відповідає структура таблиць вимогам безпеки. Наприклад, ви можете
#       перевірити, чи всі стовпці таблиць мають правильні типи даних та обмеження.
#
#
#  - `none`: Hibernate не буде створювати або оновлювати таблиці в базі даних. Цей режим може бути використаний в продакшні,
#      якщо таблиці вже існують та вони відповідають структурі, визначеній в сутностях.
#
#
#  Отже, зазвичай, для розробки використовують значення `create-drop`, `create` або `update`, а для продакшну - `validate`
#  або `none`.